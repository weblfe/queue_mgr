// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/consumer/create": {
            "post": {
                "description": "register live app info",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QueueMgrServ"
                ],
                "summary": "创建队列消费器",
                "parameters": [
                    {
                        "type": "string",
                        "description": "access jwt token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "app name",
                        "name": "app_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "app logo url",
                        "name": "app_logo_url",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "callback url",
                        "name": "callback_url",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "sync lives api",
                        "name": "sync_url",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "proxy url addr",
                        "name": "proxy_url",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            1,
                            2
                        ],
                        "type": "integer",
                        "default": 1,
                        "description": "sync type ( 1:post_sync,2:interval_sync )",
                        "name": "sync_type",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            0,
                            10,
                            15,
                            30,
                            60,
                            180
                        ],
                        "type": "integer",
                        "description": "interval sync duration (unit: second)",
                        "name": "interval_duration",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            0,
                            3,
                            5,
                            10
                        ],
                        "type": "integer",
                        "default": 0,
                        "description": "interval fail retry times",
                        "name": "interval_fail_times",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": "{\"pro_im_url\":\"\",\"test_im_url\":\"\",\"dev_im_url\":\"\"}",
                        "description": "extras data ",
                        "name": "extras",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    }
                }
            }
        },
        "/routers": {
            "get": {
                "description": "List Service Api Routers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AppCdnServ"
                ],
                "summary": "罗列服务接口列表",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.KvMap"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.KvMap"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entity.KvMap"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.KvMap"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/entity.KvMap"
                        }
                    }
                }
            }
        },
        "/state": {
            "get": {
                "description": "query queue consumer state",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QueueMgrServ"
                ],
                "summary": "查询队列消费器状态",
                "parameters": [
                    {
                        "type": "string",
                        "description": "access jwt token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "app id",
                        "name": "app_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "app name",
                        "name": "app_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "app logo url",
                        "name": "app_logo_url",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "callback url",
                        "name": "callback_url",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "proxy url addr",
                        "name": "proxy_url",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "sync lives api",
                        "name": "sync_url",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            1,
                            2
                        ],
                        "type": "integer",
                        "description": "sync type ( 1:post_sync,2:interval_sync )",
                        "name": "sync_type",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            10,
                            15,
                            30,
                            60,
                            180
                        ],
                        "type": "integer",
                        "description": "interval sync duration (unit: second)",
                        "name": "interval_duration",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            0,
                            3,
                            5,
                            10
                        ],
                        "type": "integer",
                        "description": "interval fail retry times",
                        "name": "interval_fail_times",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": "{\"pro_im_url\":\"\",\"test_im_url\":\"\",\"dev_im_url\":\"\"}",
                        "description": "extras data",
                        "name": "extras",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    }
                }
            }
        },
        "/state/update": {
            "post": {
                "description": "change queue consumer state",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QueueMgrServ"
                ],
                "summary": "控制队列消费器状态",
                "parameters": [
                    {
                        "type": "string",
                        "description": "access jwt token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "app id",
                        "name": "app_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "app name",
                        "name": "app_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "app logo url",
                        "name": "app_logo_url",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "callback url",
                        "name": "callback_url",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "proxy url addr",
                        "name": "proxy_url",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "sync lives api",
                        "name": "sync_url",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            1,
                            2
                        ],
                        "type": "integer",
                        "description": "sync type ( 1:post_sync,2:interval_sync )",
                        "name": "sync_type",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            10,
                            15,
                            30,
                            60,
                            180
                        ],
                        "type": "integer",
                        "description": "interval sync duration (unit: second)",
                        "name": "interval_duration",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            0,
                            3,
                            5,
                            10
                        ],
                        "type": "integer",
                        "description": "interval fail retry times",
                        "name": "interval_fail_times",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": "{\"pro_im_url\":\"\",\"test_im_url\":\"\",\"dev_im_url\":\"\"}",
                        "description": "extras data",
                        "name": "extras",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/entity.JsonResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.JsonData": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "info": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.KvMap"
                    }
                },
                "msg": {
                    "type": "string"
                }
            }
        },
        "entity.JsonResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data",
                    "$ref": "#/definitions/entity.JsonData"
                },
                "ret": {
                    "description": "httpCode",
                    "type": "integer"
                }
            }
        },
        "entity.KvMap": {
            "type": "object",
            "additionalProperties": true
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        },
        "OAuth2AccessCode": {
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information"
            }
        },
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "read": " Grants read access",
                "write": " Grants write access"
            }
        }
    },
    "tags": [
        {
            "description": "app队列管理服务发服务接口集合 服务路由前缀: /queue_mgr/, jwt scope: queueMgrServ",
            "name": "QueueMgrServ"
        }
    ],
    "x-extension-openapi": {
        "name": "QueueMgrServ"
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:81",
	BasePath:    "/queue_mgr",
	Schemes:     []string{"http", "https"},
	Title:       "QueueMgrServ",
	Description: "app队列管理服务发服务",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
